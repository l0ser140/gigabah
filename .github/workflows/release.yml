name: Release

on:
  workflow_call:
    inputs:
      parent_run_id:
        description: 'The workflow run ID of the build workflow that triggered this release.'
        required: true
        type: string

jobs:
  compute-version:
    runs-on: ubuntu-latest

    steps:
      - name: Compute version and release type
        id: version
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VER="${GITHUB_REF_NAME}"
            RELEASE="true"
          else
            VER="${GITHUB_SHA::7}"
            RELEASE="true"
          fi
          echo "VER=$VER"
          echo "ver=$VER" >> $GITHUB_OUTPUT
          echo "RELEASE=$RELEASE"
          echo "release=$RELEASE" >> $GITHUB_OUTPUT

    outputs:
      ver: ${{ steps.version.outputs.ver  }}
      release: ${{ steps.version.outputs.release }}

  create-apple-dmg:
    runs-on: macos-latest
    needs: compute-version

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          run-id: ${{ inputs.parent_run_id }}
          name: build-output
          path: ./.dist

      - name: Load create-dmg
        uses: actions/checkout@v5
        with:
          repository: 'create-dmg/create-dmg'
          ref: 'v1.2.2'
          path: create-dmg

      - name: Create macOS ZIP
        run: |
          mkdir ./.dist-mac
          cd ./.dist
          zip -ry ../.dist-mac/gigabah_${{ needs.compute-version.outputs.ver }}.zip gigabah.app
          cd ${GITHUB_WORKSPACE}

      - name: Create macOS DMG
        run: |
          mkdir ./dmg-temp
          mv ./.dist/gigabah.app ./dmg-temp/
          ./create-dmg/create-dmg \
            --volname "Gigabah ${{ needs.compute-version.outputs.ver }}" \
            "./.dist-mac/gigabah_${{ needs.compute-version.outputs.ver }}.dmg" \
            "./dmg-temp"

      - name: Upload mac artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac-output
          path: .dist-mac
          if-no-files-found: "error"
          include-hidden-files: "true"
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs:
      - compute-version
      - create-apple-dmg
    permissions:
      packages: write
      contents: write

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          run-id: ${{ inputs.parent_run_id }}
          name: build-output
          path: ./.dist

      - name: Download mac artifacts
        uses: actions/download-artifact@v5
        with:
          name: mac-output
          path: ./.dist-mac


      - name: Login into ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Linux Dedicated Server to GHCR
        run: |
          docker load -i ./.dist/linux-dedicated.tar
          docker tag linux-dedicated:latest ghcr.io/${{ github.repository }}:${{ needs.compute-version.outputs.ver }}
          docker push ghcr.io/${{ github.repository }}:${{ needs.compute-version.outputs.ver }}
          if [[ "${{ needs.compute-version.outputs.release }}" == "true" ]]; then
            docker tag linux-dedicated:latest ghcr.io/${{ github.repository }}:latest
            docker push ghcr.io/${{ github.repository }}:latest
          fi
          rm -f ./.dist/linux-dedicated.tar

      - name: Add version to build artifacts
        run: |
          for f in ./.dist/*; do
            base="${f%.*}"
            ext="${f##*.}"
            mv "$f" "${base}_${{ needs.compute-version.outputs.ver }}.${ext}"
          done

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          target_commitish: ${{ github.sha }}
          tag_name: ${{ needs.compute-version.outputs.ver }}
          name: "${{ needs.compute-version.outputs.ver }}"
          body: |
            | File | Download |
            |------|----------|
            | Windows Desktop | [gigabah_${{ needs.compute-version.outputs.ver }}.exe](https://github.com/${{ github.repository }}/releases/download/${{ needs.compute-version.outputs.ver }}/gigabah_${{ needs.compute-version.outputs.ver }}.exe) |
            | Linux Desktop | [gigabah_${{ needs.compute-version.outputs.ver }}.x86_64](https://github.com/${{ github.repository }}/releases/download/${{ needs.compute-version.outputs.ver }}/gigabah_${{ needs.compute-version.outputs.ver }}.x86_64) |
            | macOS Desktop | [gigabah_${{ needs.compute-version.outputs.ver }}.dmg](https://github.com/${{ github.repository }}/releases/download/${{ needs.compute-version.outputs.ver }}/gigabah_${{ needs.compute-version.outputs.ver }}.dmg)<br>[gigabah_${{ needs.compute-version.outputs.ver }}.zip](https://github.com/${{ github.repository }}/releases/download/${{ needs.compute-version.outputs.ver }}/gigabah_${{ needs.compute-version.outputs.ver }}.zip) |
            | Docker Server | `docker pull ghcr.io/${{ github.repository }}:${{ needs.compute-version.outputs.ver }}` |
          generate_release_notes: true
          draft: false
          prerelease: ${{ needs.compute-version.outputs.release == 'false' }}
          make_latest: "${{ needs.compute-version.outputs.release == 'true' }}"
          files: |
            ./.dist/*
            ./.dist-mac/*
